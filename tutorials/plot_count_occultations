#!/usr/bin/env python3

import numpy as np
from dynamodb_demonstration import occultation_count_figure

#  Main program.

from dynamodb_demonstration import occultation_count_by_mission

if __name__ == "__main__":

    import argparse

    # Defaults. 

    ytickdef_default = "0,5000,1000,200"

    parser = argparse.ArgumentParser( description="Plot a timeseries of the number of " + \
            "occultations by mission." )

    parser.add_argument( "-o", destination="output", type=str, help="The name of the output " + \
            "encapsulated postscript file." )
    parser.add_argument( "--ytickdef", type=str, default=ytickdef_default, 
            help="Four numbers separated by commas containing (1) the minimum " + \
                    "y tick mark, (2) the maximum y tick mark, (3) the interval " + \
                    "between major tick marks, and (4) the interval between minor " + \
                    "tick marks. The default is " + ytickdef_default )

    parser.add_argument( "jsonfiles", metavar="jsonfile", type=str, nargs="+", 
            "Path to a JSON file containing occultation counts" )

    args = parser.parse_args()

    #  Y tick definitions. 

    s = re.split( ",", args.ytickdef )
    yticks = np.arange( float( s[0] ), float( s[1] ) + 0.01, float( s[2] ) )
    yminor = float( s[3] )

    #  Read the data. 

    alldata_tmp = []
    for jsonfile in args.jsonfiles: 
        with open( jsonfile, 'r' ) as fp: 
            alldata_tmp += json.load( fp )

    #  Sort the data. 

    yearmonths = [ f"{rec['year']:04d}-{rec['month']:02d}" for rec in alldata_tmp ]
    yearmonths_sorted = sorted( yearmonths )

    alldata = []
    for yearmonth in yearmonths_sorted: 
        irec = yearmonths.index( yearmonth )
        alldata.append( alldata_tmp[irec] )

    #  Plot. 

    ret = occultation_count_figure( alldata, args.output, yticks=yticks, yminor=yminor )

    pass

